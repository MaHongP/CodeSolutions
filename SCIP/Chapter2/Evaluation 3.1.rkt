(define balance 100)
(define (withdraw amount)
  (if (>= balance amount)
      (begin (set! balance (- balance amount))
             balance)
      "Insufficient Fund"))

(define (make-withdraw balance)
    (lambda(amount)
      (if (>= balance amount)
          (begin (set! balance (- balance amount))
                 balance)
          "Insufficient Fund")))
;Practice 3.1
(define (make-accumulator starter)
  (lambda (amount)
    (begin (set! starter (+ starter amount)) starter)))
;Practice 3.1 End
(define (square x) (* x x))

(define (make-account-demo balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient Fund"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Unknown request -- MAKE-ACCOUNT"
                       m))))
  dispatch)
;Practice 3.2
(define counter-m 0)
(define (make-monitored f)
  (lambda(input)
      (cond ((eq? input 'howmany?) counter-m)
            ((eq? input 'reset?) (begin (set! counter-m 0) 0))
            (else (begin (set! counter-m (+ counter-m 1)) (f input))))))
;Practice 3.2 End
;Practice 3.3
(define (call-the-cops)
  (display "Hey! There is a brute fool!"))
(define (make-account balance secret-password)
  (let ((pwd-err-max 7)
        (pwd-err 0))
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount)) balance))
    "Insufficient Fund")
  (define (deposit amount)
    (begin (set! balance (+ balance amount)) balance))
  (define (dispatch m operator)
    ;(display "Msg: ")
    ;(display m)
    ;(display "  Key: ")
    ;(display password)
    (cond ((eq? m 'withdraw) (withdraw operator))
           ((eq? m 'deposit) (deposit operator))
           (else (error "Unknown request -- MAKE ACCOUNT" m)))
    )
  (define (checkpwd pwd m operator)
    (if (eq? pwd secret-password)
        (dispatch m operator)
        (begin (set! pwd-err (+ pwd-err 1))
                (if (> pwd-err pwd-err-max)
                    call-the-cops
                    "Password ERROR"))))
  checkpwd))

(define counter-pwderr 0)
(define (account-monitor f)
  (lambda(m pwd)
    (display (f m pwd))
    (if (eq? (f m pwd) 'password-error)
        (if (>= counter 6)
            (error "CALL-THE-COPS")
        (begin (set! counter-pwderr (+ counter-pwderr 1)) (error "password-error times " counter-pwderr)))
        (f m pwd))))


;Test Unit
(withdraw 23)
(withdraw 23)
(withdraw 230)
;#Demo1 of make-withdraw
(display "Demo1 of make-withdraw")(newline)
(define W1 (make-withdraw 100))
(define W2 (make-withdraw 100))
(W1 50)
(W1 20)
(W2 1000)
(display "End demo1") (newline)
;Practice 3.1
(define acc-5 (make-accumulator 5))
(acc-5 10)
;#Demo2 of make-account-demo
(display "Demo2 of make-account-demo")(newline)
(define acc (make-account-demo 100))
((acc 'withdraw) 60)
((acc 'withdraw) 10)
((acc 'withdraw) 60)
((acc 'deposit) 50)
(display "End demo1") (newline)
;Practice 3.2
(define monitored-square (make-monitored square))
(monitored-square 2)
(monitored-square 'howmany?)
(monitored-square 'reset?)
(eq? 'guess 'guess)
;Practice 3.2End
;Practice 3.3
(define acc-cop (make-account 100 'binnbou))
(acc-cop 'f**k 'deposit 100)
(acc-cop 'f**k 'deposit 100)
(acc-cop 'f**k 'deposit 100)
(acc-cop 'binnbou 'deposit 100)
(acc-cop 'f**k 'deposit 100)
(acc-cop 'f**k 'deposit 100)
(acc-cop 'f**k 'deposit 100)
(acc-cop 'f**k 'deposit 100)
(acc-cop 'f**k 'deposit 100)
(acc-cop 'f**k 'deposit 100)
