(define (scale-tree tree factor)
  (map (lambda (subtree)
         (if (pair? subtree)
             (scale-tree subtree factor)
             (* subtree factor)
             )) tree))
(define (tree-map proc tree)
  (map (lambda (subtree)
         (if (pair? subtree)
             (tree-map proc subtree)
             (proc subtree)
             )) tree))
(define (square x) (* x x))

;Test
(define tr-test (list (list 1 (list 2 3)) 4 (list 5 6)))
(display tr-test)
(newline)
(display (scale-tree tr-test 2))
(newline)
(display (tree-map square tr-test))