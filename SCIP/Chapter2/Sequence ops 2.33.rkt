(define (filter predicate sequence)
  (cond ((null? sequence) (list ))
        ((predicate (car sequence))
         (cons (car sequence)
               (filter predicate (cdr sequence))))
        (else (filter predicate (cdr sequence)))))
(define (odd? x)
  (= (remainder x 2) 1))
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
  (op (car sequence) (accumulate op initial (cdr sequence)))
  ))
(define (enumerate-tree tree)
  (cond ((null? tree) (list ))
        ((not (pair? tree)) (list tree))
        (else (append (enumerate-tree (car tree))
                      (enumerate-tree (cdr tree))))
        ))
;Practice 2.33
(define (map- p sequence)
  (accumulate (lambda (x y)
                (append (list (p x)) y))
              (list ) sequence))
(define (append- seq1 seq2)
  (accumulate cons  seq2 seq1))
(define (length- sequence)
  (accumulate (lambda (x y) (+ y 1)) 0 sequence))
;Practice 2.34
(define (horner-level x coeff-sequence)
  (accumulate (lambda (this-coeff higher-terms)
                (+ (* higher-terms x) this-coeff))
                  0 coeff-sequence))
;Practice 2.35
(define (count-leaves t)
  (accumulate + 0  (map (lambda (x)
                          (if (pair? x)
                              (count-leaves x)
                              1))
                        t)))
;Practice 2.36
(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      (list )
      (cons (accumulate op init (map (lambda (x) (car x)) seqs))
            (accumulate-n op init
                          (map (lambda (x) (cdr x)) seqs))
            )))
;Practice 2.37
(define (dot-product v w)
  (accumulate + 0 (map * v w)))
(define (matrix-*-vector m v)
  (map (lambda (x) (accumulate + 0 (map * v x))) m))
;  (accumulate (lambda (x y) (cons (accumulate + 0 (map * x v)) y)) (list ) m))
(define (transpose m)
  (accumulate-n cons (list ) m))
(define (matrix-*-matrix m n)
  (let ((cols (transpose n)))
    (map (lambda (x) (matrix-*-vector cols x)) m))
  )
;Test
(display (filter odd? (list 1 358 98 9 46 )))
(newline)
(display (accumulate + 0 (filter odd? (list 1 358 98 9 46))))
(newline)
(display (enumerate-tree (list (list 1 2 (list  3 4) 5 (list 6 7)))))
(newline)
(map- (lambda (x) (+ x 1 )) (list 1 2 3))
(newline)
(display (append- (list 1 (list  2 3)) (list 4 5 6)))
(newline)
(display (length- (list 1 (list  2 3) (list 4 5 6))))
(newline)
(display "Practice 2.34")
(newline)
(horner-level 2 (list 1 3 0 5 0 1))
(display "Practice 2.35")
(newline)
(count-leaves (list 1 (list  2 3) (list 4 5 6)))
(display "Practice 2.36")
(newline)
(accumulate-n + 0 (list (list 1 2 3) (list 4 5 6) (list 7 8 9) (list 10 11 12)))
(display "Practice 2.37")
(newline)
(define test-m (list (list 1 2 3 4) (list 4 5 6 6) (list 6 7 8 9)))
(define test-v (list 1 2 3 4))
(matrix-*-vector test-m test-v)
(transpose test-m)
(matrix-*-matrix test-m (transpose test-m))