;Interval Calculation
;##ABS
(define (abs x)
  (if (< x 0) (- x) x))

;Definition of Interval
(define (make-interval a b)
  (if (> a b) (cons b a)
        (cons a b)
        ))
(define (lower-bound x)
  (car x))
(define (upper-bound x)
  (cdr x))
(define (print-interval x)
  (newline)
  (display "[ ")
  (display (lower-bound x))
  (display ", ")
  (display (upper-bound x))
  (display " ]")
 )
;Definition of addition, substraction,multiply and division of interval
(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y)) (+ (upper-bound x) (upper-bound y))))
(define (sub-interval x y)
  (make-interval (- (lower-bound x) (lower-bound y)) (- (upper-bound x) (upper-bound y))))
(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))
(define (div-interval x y)
  (if (and (not (> (lower-bound y) 0)) (not (< (upper-bound y) 0)))
      (display "Input Error: Division number illegal!")
  (mul-interval x (make-interval (/ 1.0 (lower-bound y)) (/ 1.0 (upper-bound y))))
  ))
;Practice 2.9
(define (len-interval x)
  (/ ( - (upper-bound x) (lower-bound x) ) 2))
        
            
;Test Unit
(define test-in1 (make-interval 4 3))
(define test-in2 (make-interval 3 7))
(print-interval test-in1)
(print-interval test-in2)
(print-interval (add-interval test-in1 test-in2))
(print-interval (sub-interval test-in1 test-in2))
(print-interval (mul-interval test-in1 test-in2))
(print-interval (div-interval test-in1 test-in2))
;Practice 2.8 finished
(newline)
(display "Interval length under addition adn substraction")
(newline)
(display (len-interval (add-interval test-in1 test-in2)))
(display " =?? "  )
(display (+ (len-interval test-in1) (len-interval test-in2)))
(newline)
(display (len-interval (sub-interval test-in1 test-in2)))
(display " =?? "  )
(display (abs (- (len-interval test-in1) (len-interval test-in2))))
;Practice 2.10
(define test-in3 (make-interval -1 10))
(newline)
(div-interval test-in1 test-in3)
