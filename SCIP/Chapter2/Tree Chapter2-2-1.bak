;Trees

;Length of a list
(define (length items)
  (define (length-iter a count)
    (if (null? a)
         count
         (length-iter (cdr a) (+ count 1))))
  (length-iter items 0)
  )

;Count leaves of a tree
(define (count-leaves tree)
  (cond ((null? tree) 0)
        ((not (pair? tree )) 1)
        (else (+(count-leaves (car tree))
                (count-leaves (cdr tree))))))

;Deep reverse Practice 2.27
;
;(define (reverse items)
;  (define (reverse-inner former transitted)
;    (if (null? former)
;        transitted
;        (reverse-inner (cdr former) (cons (car former) transitted))
;        ))
;  (if (null? items)
;      items
;      (reverse-inner items (list))
;      ))
;
;(define (deep-reverse items)
;  (if (or (null? items) (not (pair? items)))
;      items
;      (map reverse items)
;      ))
;Test Unit
;Practice 2.24
(define test-tr (cons (list 1 2) (list 3 4)))
(display test-tr)
(newline)
(count-leaves test-tr)
(map (lambda (x) (+ x 1) ) (list 1 2 3 4))
(reverse test-tr)
(deep-reverse test-tr)
(define test-tr2 (list 1 2 (list 3 4)))
