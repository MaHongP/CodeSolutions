(define (scale-tree tree factor)
  (map (lambda (subtree)
         (if (pair? subtree)
             (scale-tree subtree factor)
             (* subtree factor)
             )) tree))
(define (tree-map proc tree)
  (map (lambda (subtree)
         (if (pair? subtree)
             (tree-map proc subtree)
             (proc subtree)
             )) tree))
(define (square x) (* x x))
(define (subsets s)
  (if (null? s)
      (list (list ))
      (let ((rest (subsets (cdr s))))
        (append rest (map (lambda (x) (append (list (car s)) x)) rest))
        )))
;Test
(define tr-test (list (list 1 (list 2 3)) 4 (list 5 6)))
(display tr-test)
(newline)
(display (scale-tree tr-test 2))
(newline)
(display (tree-map square tr-test))
;2.32
(newline)
(define sets (list 1 2 3))
(display sets)
(map (lambda (x) (append (list 3) x)) (list (list 1) (list 2) (list 3)))
((lambda (x y) (if (null? y) (list (list )) (map (lambda (z) (append (list x) (list z))) y)))
 20 (list 1 2 3 ))
  ((lambda (x y) (if (null? y) (list (list )) (map (lambda (z) (append (list x) (list z))) y)))
 20 (list ))
(map (lambda (x) (list x)) (list 1 2 3)) 
(append (list 3)  (list 1 2 3))
(newline)
(display (subsets sets))